# Generated by Django 3.2.7 on 2023-10-12 03:47

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=200, null=True, unique=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='uploads/images/blogs/')),
                ('category', models.IntegerField(choices=[(0, 'Services'), (1, 'Hash tags for insta')], default=0)),
                ('content', ckeditor.fields.RichTextField()),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Published')], default=1)),
                ('seo_title', models.CharField(blank=True, max_length=200)),
                ('seo_description', models.CharField(blank=True, max_length=500)),
                ('seo_json', models.CharField(blank=True, max_length=500)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, null=True, related_name='blog_posts', to='blogs.BlogTag')),
            ],
        ),
    ]
